/*!
 * Chart.Annotation.js
 * http://chartjs.org/
 * Version: 0.1.0
 *
 * Copyright 2016 Evert Timberg
 * Released under the MIT license
 * https://github.com/chartjs/Chart.Annotation.js/blob/master/LICENSE.md
 */
! function n(t, o, r) {
    function e(i, f) {
        if (!o[i]) {
            if (!t[i]) {
                var c = "function" == typeof require && require;
                if (!f && c) return c(i, !0);
                if (a) return a(i, !0);
                var u = new Error("Cannot find module '" + i + "'");
                throw u.code = "MODULE_NOT_FOUND", u
            }
            var s = o[i] = {
                exports: {}
            };
            t[i][0].call(s.exports, function (n) {
                var o = t[i][1][n];
                return e(o ? o : n)
            }, s, s.exports, n, t, o, r)
        }
        return o[i].exports
    }
    for (var a = "function" == typeof require && require, i = 0; i < r.length; i++) e(r[i]);
    return e
}({
    1: [function (n, t, o) {}, {}],
    2: [function (n, t, o) {
        function r(n, t, o) {
            var r = n._model = n._model || {},
                e = o.scales[t.scaleID],
                a = e ? e.getPixelForValue(t.value) : NaN,
                i = o.chartArea;
            isNaN(a) || (t.mode == f ? (r.x1 = i.left, r.x2 = i.right, r.y1 = r.y2 = a) : (r.y1 = i.top, r.y2 = i.bottom, r.x1 = r.x2 = a)), r.borderColor = t.borderColor, r.borderWidth = t.borderWidth
        }
        var e = n("chart.js");
        e = "function" == typeof e ? e : window.Chart;
        var a = e.helpers,
            i = a.isArray,
            f = "horizontal";
        e.Annotation = e.Annotation || {};
        var c = (e.Annotation.defaults = {
                annotations: []
            }, e.Element.extend({
                draw: function (n) {
                    var t = this._view;
                    n.lineWidth = t.borderWidth, n.strokeStyle = t.borderColor, n.beginPath(), n.moveTo(t.x1, t.y1), n.lineTo(t.x2, t.y2), n.stroke()
                }
            })),
            u = e.Annotation.annotationTypes = {
                line: c
            },
            s = e.Annotation.updateFunctions = {
                line: r
            },
            l = e.PluginBase.extend({
                beforeInit: function (n) {
                    var t = n.options;
                    t.annotation = a.configMerge(t.annotation, e.Annotation.defaults);
                    var o = t.annotation.annotations;
                    if (i(o)) {
                        var r = n._annotationObjects = [];
                        o.forEach(function (n, t) {
                            var o = u[n.type];
                            o && r.push(new o({
                                _index: t
                            }))
                        })
                    }
                },
                afterScaleUpdate: function (n) {
                    var t = n._annotationObjects,
                        o = n.options.annotation;
                    i(t) && t.forEach(function (t, r) {
                        var e = o.annotations[t._index],
                            a = s[e.type];
                        a && a(t, e, n)
                    })
                },
                afterDraw: function (n, t) {
                    var o = n._annotationObjects;
                    if (i(o)) {
                        var r = n.chart.ctx;
                        o.forEach(function (n) {
                            n.transition(t).draw(r)
                        })
                    }
                }
            });
        e.pluginService.register(new l)
    }, {
        "chart.js": 1
    }]
}, {}, [2]);